---
const { rules, form } = Astro.props;
---

<div class="contact-form-container">
  <div id="form-intro" class="mb-8 rounded-xl border border-neutral-200 bg-white p-6 dark:border-neutral-700 dark:bg-neutral-800">
    <h3 class="mb-3 text-xl font-semibold tracking-tight text-neutral-900 dark:text-neutral-100">{form.introBox.title}</h3>
    <p class="mb-6 text-neutral-600 dark:text-neutral-400">{form.introBox.description}</p>
    <div class="rounded-lg border border-amber-200 bg-amber-50 p-4 dark:border-amber-800/50 dark:bg-amber-900/20">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-amber-500" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
          </svg>
        </div>
        <div class="ml-3">
          <p class="text-sm text-amber-800 dark:text-amber-200">
            <strong>{form.introBox.important}</strong>
            {form.introBox.requirements}
          </p>
        </div>
      </div>
    </div>
    <div class="mt-6">
      <button id="rules-modal-trigger" class="inline-flex items-center gap-2 rounded-full bg-sky-500 px-6 py-3 text-sm font-semibold tracking-tight text-white transition-colors duration-200 hover:bg-sky-600 sm:px-8 sm:py-4 sm:text-lg dark:text-black">
        <span>{rules.button}</span>
      </button>
    </div>
  </div>
  <div id="contact-form" class="hidden rounded-xl border border-neutral-200 bg-white p-4 sm:p-6 lg:p-8 dark:border-neutral-700 dark:bg-neutral-800">
    <form class="space-y-6 sm:space-y-8">
      <div class="form-step" id="step-1">
        <div class="mb-4 sm:mb-6">
          <h2 class="mb-3 text-xl font-bold tracking-tight text-neutral-900 sm:mb-4 sm:text-2xl dark:text-neutral-100">{form.step1.title}</h2>
        </div>
        <div class="grid gap-3 sm:grid-cols-2">
          {
            form.step1.options.map((option, index) => (
              <label class="group relative cursor-pointer">
                <input type="radio" name="project-type" value={option} class="sr-only" />
                <div class="rounded-xl border border-neutral-200 p-3 transition-all duration-200 group-hover:border-neutral-300 sm:p-4 dark:border-neutral-700 dark:group-hover:border-neutral-600">
                  <div class="flex items-center space-x-3">
                    <div class="radio-indicator flex h-5 w-5 items-center justify-center rounded-full border border-neutral-300 transition-all duration-200 dark:border-neutral-600">
                      <div class="radio-dot h-2 w-2 rounded-full bg-white opacity-0 transition-opacity duration-200 dark:bg-black" />
                    </div>
                    <span class="text-sm font-medium text-neutral-900 sm:text-base dark:text-neutral-100">{option}</span>
                  </div>
                </div>
              </label>
            ))
          }
        </div>
      </div>
      <div class="form-step hidden" id="step-2">
        <div class="mb-4 sm:mb-6">
          <h2 class="mb-3 text-xl font-bold tracking-tight text-neutral-900 sm:mb-4 sm:text-2xl dark:text-neutral-100">{form.step2.title}</h2>
        </div>
        <div class="space-y-4 sm:space-y-6">
          <!-- Project Description -->
          <div>
            <label for="description" class="mb-2 block text-sm font-medium text-neutral-900 dark:text-neutral-100">{form.step2.description.label}</label>
            <textarea id="description" name="description" rows="4" placeholder={form.step2.description.placeholder} class="w-full rounded-xl border border-neutral-200 px-3 py-2 text-neutral-900 placeholder-neutral-500 focus:border-sky-500 focus:ring-1 focus:ring-sky-500 focus:outline-none sm:px-4 sm:py-3 dark:border-neutral-700 dark:bg-neutral-800 dark:text-neutral-100 dark:placeholder-neutral-400 dark:focus:border-sky-400 dark:focus:ring-sky-400"></textarea>
          </div>

          <!-- Domain -->
          <div>
            <label class="mb-2 block text-sm font-medium text-neutral-900 dark:text-neutral-100">{form.step2.domain.label}</label>
            <div class="grid gap-2">
              {
                form.step2.domain.options.map((option) => (
                  <label class="group relative cursor-pointer">
                    <input type="radio" name="domain" value={option} class="sr-only" />
                    <div class="rounded-lg border border-neutral-200 p-2 transition-all duration-200 group-hover:border-neutral-300 sm:p-3 dark:border-neutral-700 dark:group-hover:border-neutral-600">
                      <div class="flex items-center space-x-3">
                        <div class="radio-indicator flex h-4 w-4 items-center justify-center rounded-full border border-neutral-300 transition-all duration-200 dark:border-neutral-600">
                          <div class="radio-dot h-1.5 w-1.5 rounded-full bg-white opacity-0 transition-opacity duration-200 dark:bg-black" />
                        </div>
                        <span class="text-sm font-medium text-neutral-900 dark:text-neutral-100">{option}</span>
                      </div>
                    </div>
                  </label>
                ))
              }
            </div>
          </div>

          <!-- Content Readiness -->
          <div>
            <label class="mb-2 block text-sm font-medium text-neutral-900 dark:text-neutral-100">{form.step2.content.label}</label>
            <div class="grid gap-2">
              {
                form.step2.content.options.map((option) => (
                  <label class="group relative cursor-pointer">
                    <input type="radio" name="content" value={option} class="sr-only" />
                    <div class="rounded-lg border border-neutral-200 p-2 transition-all duration-200 group-hover:border-neutral-300 sm:p-3 dark:border-neutral-700 dark:group-hover:border-neutral-600">
                      <div class="flex items-center space-x-3">
                        <div class="radio-indicator flex h-4 w-4 items-center justify-center rounded-full border border-neutral-300 transition-all duration-200 dark:border-neutral-600">
                          <div class="radio-dot h-1.5 w-1.5 rounded-full bg-white opacity-0 transition-opacity duration-200 dark:bg-black" />
                        </div>
                        <span class="text-sm font-medium text-neutral-900 dark:text-neutral-100">{option}</span>
                      </div>
                    </div>
                  </label>
                ))
              }
            </div>
          </div>

          <!-- Style Reference -->
          <div>
            <label for="style" class="mb-2 block text-sm font-medium text-neutral-900 dark:text-neutral-100">{form.step2.style.label}</label>
            <textarea id="style" name="style" rows="3" placeholder={form.step2.style.placeholder} class="w-full rounded-xl border border-neutral-200 px-3 py-2 text-neutral-900 placeholder-neutral-500 focus:border-sky-500 focus:ring-1 focus:ring-sky-500 focus:outline-none sm:px-4 sm:py-3 dark:border-neutral-700 dark:bg-neutral-800 dark:text-neutral-100 dark:placeholder-neutral-400 dark:focus:border-sky-400 dark:focus:ring-sky-400"></textarea>
          </div>
        </div>
      </div>

      <!-- Step 3: Budget & Timeline -->
      <div class="form-step hidden" id="step-3">
        <div class="mb-4 sm:mb-6">
          <h2 class="mb-3 text-xl font-bold tracking-tight text-neutral-900 sm:mb-4 sm:text-2xl dark:text-neutral-100">{form.step3.title}</h2>
        </div>
        <div class="space-y-4 sm:space-y-6">
          <!-- Budget -->
          <div>
            <label class="mb-2 block text-sm font-medium text-neutral-900 dark:text-neutral-100">{form.step3.budget.label}</label>
            <div class="grid gap-2 sm:grid-cols-2">
              {
                form.step3.budget.options.map((option) => (
                  <label class="group relative cursor-pointer">
                    <input type="radio" name="budget" value={option} class="sr-only" />
                    <div class="rounded-lg border border-neutral-200 p-2 text-center transition-all duration-200 group-hover:border-neutral-300 sm:p-3 dark:border-neutral-700 dark:group-hover:border-neutral-600">
                      <div class="flex items-center justify-center space-x-3">
                        <div class="radio-indicator flex h-4 w-4 items-center justify-center rounded-full border border-neutral-300 transition-all duration-200 dark:border-neutral-600">
                          <div class="radio-dot h-1.5 w-1.5 rounded-full bg-white opacity-0 transition-opacity duration-200 dark:bg-black" />
                        </div>
                        <span class="text-xs font-medium text-neutral-900 sm:text-sm dark:text-neutral-100">{option}</span>
                      </div>
                    </div>
                  </label>
                ))
              }
            </div>
          </div>

          <!-- Timeline -->
          <div>
            <label class="mb-2 block text-sm font-medium text-neutral-900 dark:text-neutral-100">{form.step3.timeline.label}</label>
            <div class="grid gap-2">
              {
                form.step3.timeline.options.map((option) => (
                  <label class="group relative cursor-pointer">
                    <input type="radio" name="timeline" value={option} class="sr-only" />
                    <div class="rounded-lg border border-neutral-200 p-2 transition-all duration-200 group-hover:border-neutral-300 sm:p-3 dark:border-neutral-700 dark:group-hover:border-neutral-600">
                      <div class="flex items-center space-x-3">
                        <div class="radio-indicator flex h-4 w-4 items-center justify-center rounded-full border border-neutral-300 transition-all duration-200 dark:border-neutral-600">
                          <div class="radio-dot h-1.5 w-1.5 rounded-full bg-white opacity-0 transition-opacity duration-200 dark:bg-black" />
                        </div>
                        <span class="text-sm font-medium text-neutral-900 dark:text-neutral-100">{option}</span>
                      </div>
                    </div>
                  </label>
                ))
              }
            </div>
          </div>
        </div>
      </div>

      <!-- Step 4: Contact -->
      <div class="form-step hidden" id="step-4">
        <div class="mb-4 sm:mb-6">
          <h2 class="mb-3 text-xl font-bold tracking-tight text-neutral-900 sm:mb-4 sm:text-2xl dark:text-neutral-100">{form.step4.title}</h2>
        </div>
        <div class="space-y-4 sm:space-y-6">
          <!-- Name -->
          <div>
            <label for="name" class="mb-2 block text-sm font-medium text-neutral-900 dark:text-neutral-100">{form.step4.name.label}</label>
            <input type="text" id="name" name="name" placeholder={form.step4.name.placeholder} class="w-full rounded-xl border border-neutral-200 px-3 py-2 text-neutral-900 placeholder-neutral-500 focus:border-sky-500 focus:ring-1 focus:ring-sky-500 focus:outline-none sm:px-4 sm:py-3 dark:border-neutral-700 dark:bg-neutral-800 dark:text-neutral-100 dark:placeholder-neutral-400 dark:focus:border-sky-400 dark:focus:ring-sky-400" />
          </div>

          <!-- Email -->
          <div>
            <label for="email" class="mb-2 block text-sm font-medium text-neutral-900 dark:text-neutral-100">{form.step4.email.label}</label>
            <input type="email" id="email" name="email" placeholder={form.step4.email.placeholder} class="w-full rounded-xl border border-neutral-200 px-3 py-2 text-neutral-900 placeholder-neutral-500 focus:border-sky-500 focus:ring-1 focus:ring-sky-500 focus:outline-none sm:px-4 sm:py-3 dark:border-neutral-700 dark:bg-neutral-800 dark:text-neutral-100 dark:placeholder-neutral-400 dark:focus:border-sky-400 dark:focus:ring-sky-400" />
          </div>

          <!-- Phone -->
          <div>
            <label for="phone" class="mb-2 block text-sm font-medium text-neutral-900 dark:text-neutral-100">{form.step4.phone.label}</label>
            <input type="tel" id="phone" name="phone" placeholder={form.step4.phone.placeholder} class="w-full rounded-xl border border-neutral-200 px-3 py-2 text-neutral-900 placeholder-neutral-500 focus:border-sky-500 focus:ring-1 focus:ring-sky-500 focus:outline-none sm:px-4 sm:py-3 dark:border-neutral-700 dark:bg-neutral-800 dark:text-neutral-100 dark:placeholder-neutral-400 dark:focus:border-sky-400 dark:focus:ring-sky-400" />
          </div>
        </div>
      </div>

      <!-- Step 5: Terms -->
      <div class="form-step hidden" id="step-5">
        <div class="mb-4 sm:mb-6">
          <h2 class="mb-3 text-xl font-bold tracking-tight text-neutral-900 sm:mb-4 sm:text-2xl dark:text-neutral-100">{form.step5.title}</h2>
        </div>
        <div class="space-y-4 sm:space-y-6">
          <!-- Terms Acceptance -->
          <div>
            <label class="mb-2 block text-sm font-medium text-neutral-900 dark:text-neutral-100">{form.step5.terms.label}</label>
            <div class="grid gap-2">
              {
                form.step5.terms.options.map((option) => (
                  <label class="group relative cursor-pointer">
                    <input type="radio" name="terms" value={option} class="sr-only" />
                    <div class="rounded-lg border border-neutral-200 p-2 transition-all duration-200 group-hover:border-neutral-300 sm:p-3 dark:border-neutral-700 dark:group-hover:border-neutral-600">
                      <div class="flex items-center space-x-3">
                        <div class="radio-indicator flex h-4 w-4 items-center justify-center rounded-full border border-neutral-300 transition-all duration-200 dark:border-neutral-600">
                          <div class="radio-dot h-1.5 w-1.5 rounded-full bg-white opacity-0 transition-opacity duration-200 dark:bg-black" />
                        </div>
                        <span class="text-sm font-medium text-neutral-900 dark:text-neutral-100">{option}</span>
                      </div>
                    </div>
                  </label>
                ))
              }
            </div>
          </div>

          <!-- Expectations -->
          <div>
            <label for="expectations" class="mb-2 block text-sm font-medium text-neutral-900 dark:text-neutral-100">{form.step5.expectations.label}</label>
            <textarea id="expectations" name="expectations" rows="4" placeholder={form.step5.expectations.placeholder} class="w-full rounded-xl border border-neutral-200 px-3 py-2 text-neutral-900 placeholder-neutral-500 focus:border-sky-500 focus:ring-1 focus:ring-sky-500 focus:outline-none sm:px-4 sm:py-3 dark:border-neutral-700 dark:bg-neutral-800 dark:text-neutral-100 dark:placeholder-neutral-400 dark:focus:border-sky-400 dark:focus:ring-sky-400"></textarea>
          </div>

          <!-- Optional Notes -->
          <div>
            <label for="notes" class="mb-2 block text-sm font-medium text-neutral-900 dark:text-neutral-100">{form.step5.notes.label}</label>
            <textarea id="notes" name="notes" rows="3" placeholder={form.step5.notes.placeholder} class="w-full rounded-xl border border-neutral-200 px-3 py-2 text-neutral-900 placeholder-neutral-500 focus:border-sky-500 focus:ring-1 focus:ring-sky-500 focus:outline-none sm:px-4 sm:py-3 dark:border-neutral-700 dark:bg-neutral-800 dark:text-neutral-100 dark:placeholder-neutral-400 dark:focus:border-sky-400 dark:focus:ring-sky-400"></textarea>
          </div>
        </div>
      </div>

      <!-- Form Navigation -->
      <div class="flex flex-col items-center justify-between gap-4 border-t border-neutral-200 pt-4 sm:flex-row sm:pt-6 dark:border-neutral-700">
        <button type="button" id="prev-btn" class="order-2 hidden w-full rounded-full border border-neutral-300 bg-transparent px-4 py-2 font-medium text-neutral-600 transition-colors duration-200 hover:bg-neutral-100 hover:text-black sm:order-1 sm:w-auto sm:px-6 sm:py-3 dark:border-neutral-600 dark:text-neutral-400 dark:hover:bg-neutral-700 dark:hover:text-white">
          {form.buttons.previous}
        </button>
        <div class="order-1 flex space-x-2 sm:order-2">
          <div class="step-indicator active h-2 w-6 rounded-full bg-sky-500 sm:w-8"></div>
          <div class="step-indicator h-2 w-6 rounded-full bg-neutral-200 sm:w-8 dark:bg-neutral-700"></div>
          <div class="step-indicator h-2 w-6 rounded-full bg-neutral-200 sm:w-8 dark:bg-neutral-700"></div>
          <div class="step-indicator h-2 w-6 rounded-full bg-neutral-200 sm:w-8 dark:bg-neutral-700"></div>
          <div class="step-indicator h-2 w-6 rounded-full bg-neutral-200 sm:w-8 dark:bg-neutral-700"></div>
        </div>
        <button type="button" id="next-btn" class="order-3 w-full rounded-full bg-sky-500 px-4 py-2 font-medium text-white transition-colors duration-200 hover:bg-sky-600 sm:w-auto sm:px-6 sm:py-3 dark:text-black" disabled>
          {form.buttons.next}
        </button>
        <button type="submit" id="submit-btn" class="order-3 hidden w-full rounded-full bg-sky-500 px-4 py-2 font-medium text-white transition-colors duration-200 hover:bg-sky-600 sm:w-auto sm:px-6 sm:py-3 dark:text-black">
          {form.buttons.submit}
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Rules Modal -->
<div id="rules-modal" class="fixed inset-0 z-50 hidden items-center justify-center bg-black/50 backdrop-blur-sm">
  <div class="mx-4 max-h-[90vh] w-full max-w-2xl overflow-y-auto rounded-2xl bg-white p-6 dark:bg-neutral-900">
    <div class="mb-6 flex items-center justify-between">
      <h2 class="text-2xl font-bold tracking-tight text-neutral-900 dark:text-neutral-100">{rules.modalTitle}</h2>
      <button id="modal-close" class="flex h-8 w-8 items-center justify-center rounded-full text-neutral-500 hover:bg-neutral-100 dark:hover:bg-neutral-800">
        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <div class="space-y-8">
      {
        rules.sections.map((section) => (
          <div>
            <h3 class="mb-4 text-lg font-semibold text-neutral-900 dark:text-neutral-100">{section.title}</h3>
            <ul class="space-y-2">
              {section.rules.map((rule) => (
                <li class="flex items-start space-x-3">
                  <div class="mt-1 flex h-5 w-5 items-center justify-center rounded-full bg-sky-500/10">
                    <svg class="h-3 w-3 text-sky-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                  </div>
                  <span class="text-neutral-700 dark:text-neutral-300">{rule}</span>
                </li>
              ))}
            </ul>
          </div>
        ))
      }
    </div>

    <div class="mt-8 border-t border-neutral-200 pt-6 dark:border-neutral-700">
      <label class="mb-4 flex cursor-pointer items-start space-x-3">
        <input type="checkbox" id="rules-checkbox" class="mt-1 rounded border-neutral-300 text-sky-500 focus:ring-sky-500 dark:border-neutral-600 dark:bg-neutral-800" />
        <span class="text-sm text-neutral-700 dark:text-neutral-300">{rules.checkbox}</span>
      </label>
      <div class="flex space-x-3">
        <button id="modal-cancel" class="flex-1 rounded-full border border-neutral-300 bg-transparent px-6 py-3 font-medium text-neutral-600 transition-colors duration-200 hover:bg-neutral-100 hover:text-black dark:border-neutral-600 dark:text-neutral-400 dark:hover:bg-neutral-700 dark:hover:text-white">
          {rules.close}
        </button>
        <button id="modal-continue" class="flex-1 rounded-full bg-sky-500 px-6 py-3 font-medium text-white transition-colors duration-200 hover:bg-sky-600 disabled:cursor-not-allowed disabled:opacity-50 disabled:hover:bg-sky-500 dark:text-black" disabled>
          {rules.continue}
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  /* Fix per i radio button custom */
  input[type="radio"]:checked + div .radio-indicator {
    border-color: rgb(14 165 233);
    background-color: rgb(14 165 233);
  }

  input[type="radio"]:checked + div .radio-indicator .radio-dot {
    opacity: 1;
  }

  /* Effetti hover e checked per i container */
  input[type="radio"]:checked + div {
    border-color: rgb(14 165 233) !important;
    background-color: rgb(239 246 255) !important;
  }

  /* Dark mode support */
  .dark input[type="radio"]:checked + div .radio-indicator {
    border-color: rgb(96 165 250);
    background-color: rgb(96 165 250);
  }

  .dark input[type="radio"]:checked + div {
    border-color: rgb(96 165 250) !important;
    background-color: rgba(59, 130, 246, 0.1) !important;
  }

  /* Form step transitions */
  .form-step {
    animation: fadeIn 0.3s ease-in-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script is:inline>
  // Contact form functionality
  document.addEventListener("DOMContentLoaded", function () {
    let currentStep = 1;
    const totalSteps = 5;

    // Modal elements
    const rulesModalTrigger = document.getElementById("rules-modal-trigger");
    const rulesModal = document.getElementById("rules-modal");
    const modalClose = document.getElementById("modal-close");
    const modalCancel = document.getElementById("modal-cancel");
    const modalContinue = document.getElementById("modal-continue");
    const rulesCheckbox = document.getElementById("rules-checkbox");

    // Form elements
    const contactForm = document.getElementById("contact-form");
    const prevBtn = document.getElementById("prev-btn");
    const nextBtn = document.getElementById("next-btn");
    const submitBtn = document.getElementById("submit-btn");

    // Modal functionality
    if (rulesModalTrigger) {
      rulesModalTrigger.addEventListener("click", () => {
        if (rulesModal) {
          rulesModal.classList.remove("hidden");
          rulesModal.classList.add("flex");
        }
      });
    }

    [modalClose, modalCancel].forEach((btn) => {
      if (btn) {
        btn.addEventListener("click", () => {
          if (rulesModal) {
            rulesModal.classList.add("hidden");
            rulesModal.classList.remove("flex");
          }
        });
      }
    });

    if (rulesModal) {
      rulesModal.addEventListener("click", (e) => {
        if (e.target === rulesModal) {
          rulesModal.classList.add("hidden");
          rulesModal.classList.remove("flex");
        }
      });
    }

    if (rulesCheckbox) {
      rulesCheckbox.addEventListener("change", () => {
        if (modalContinue) {
          modalContinue.disabled = !rulesCheckbox.checked;
        }
      });
    }

    if (modalContinue) {
      modalContinue.addEventListener("click", () => {
        if (rulesModal) {
          rulesModal.classList.add("hidden");
          rulesModal.classList.remove("flex");
        }
        if (contactForm) {
          contactForm.classList.remove("hidden");
        }

        // Hide the entire introduction box instead of just the button
        const formIntro = document.getElementById("form-intro");
        if (formIntro) {
          formIntro.classList.add("hidden");
        }

        // Show form steps and navigation
        showStep(1);
      });
    }

    // Form step navigation
    function showStep(step) {
      // Hide all steps
      document.querySelectorAll(".form-step").forEach((s) => s.classList.add("hidden"));

      // Show current step
      const currentStepEl = document.getElementById(`step-${step}`);
      if (currentStepEl) {
        currentStepEl.classList.remove("hidden");
      }

      // Update navigation buttons
      if (prevBtn && nextBtn && submitBtn) {
        prevBtn.classList.toggle("hidden", step === 1);
        nextBtn.classList.toggle("hidden", step === totalSteps);
        submitBtn.classList.toggle("hidden", step !== totalSteps);
      }

      // Update step indicators in form
      document.querySelectorAll(".step-indicator").forEach((indicator, index) => {
        indicator.classList.toggle("active", index < step);
        indicator.classList.toggle("bg-sky-500", index < step);
        indicator.classList.toggle("bg-neutral-200", index >= step);
        indicator.classList.toggle("dark:bg-neutral-700", index >= step);
      });
    }

    function validateStep(step) {
      const stepEl = document.getElementById(`step-${step}`);
      if (!stepEl) return false;

      switch (step) {
        case 1:
          return stepEl.querySelector('input[name="project-type"]:checked') !== null;
        case 2:
          const description = stepEl.querySelector("#description");
          const domain = stepEl.querySelector('input[name="domain"]:checked');
          const content = stepEl.querySelector('input[name="content"]:checked');
          // Temporary fix: only require description for testing
          return description && description.value && description.value.trim().length > 10;
        case 3:
          const budget = stepEl.querySelector('input[name="budget"]:checked');
          const timeline = stepEl.querySelector('input[name="timeline"]:checked');
          return budget && timeline;
        case 4:
          const name = stepEl.querySelector("#name");
          const email = stepEl.querySelector("#email");
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          return name && name.value && name.value.trim().length > 2 && email && email.value && emailRegex.test(email.value.trim());
        case 5:
          const terms = stepEl.querySelector('input[name="terms"]:checked');
          const expectations = stepEl.querySelector("#expectations");
          return terms && expectations && expectations.value && expectations.value.trim().length > 5;
        default:
          return false;
      }
    }

    function updateNextButton() {
      if (nextBtn) {
        const isValid = validateStep(currentStep);
        nextBtn.disabled = !isValid;
      }
    }

    // Add event listeners for form validation
    document.addEventListener("input", updateNextButton);
    document.addEventListener("change", updateNextButton);

    if (nextBtn) {
      nextBtn.addEventListener("click", () => {
        if (validateStep(currentStep) && currentStep < totalSteps) {
          currentStep++;
          showStep(currentStep);
          updateNextButton();
        }
      });
    }

    if (prevBtn) {
      prevBtn.addEventListener("click", () => {
        if (currentStep > 1) {
          currentStep--;
          showStep(currentStep);
          updateNextButton();
        }
      });
    }

    if (submitBtn) {
      submitBtn.addEventListener("click", (e) => {
        e.preventDefault();
        if (validateStep(currentStep)) {
          // Show success message
          alert("Richiesta inviata con successo! Ti contatteremo presto.");
        }
      });
    }

    // Initialize form
    showStep(currentStep);
    updateNextButton();
  });
</script>
